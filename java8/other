Java New Features
Java 8 version release on 18 March 2014
Due you know most current version of Java 
Java 10 - It is unfortunate that after Java 10 we are discussing about the Java 8 

Earlier perople are not taking much import to java 8 after new version people are taking importance of Java 
after 3 years perople will give importance to java 9 or 10

Do you know about SCALA python 2013 Around other language are taking the popularity 
Reason : Because 10 lines having power in long java code 
Python few lines compare to Java 
Slowly people are moving the other language 
Java people Analyse it and some changes are done i.e Java 8 NEQ feature are introduced 

CONCISE CODE -Advantage 
HOW They ge t Sir ?
Just because of enabling Functaionaling programming 
Earlier java is object oriented programming 
Java people having EGO about HEY we are object oriented programming 

EGO Removed after Java 8 -Java suppourt Funcational progreamming 
Lambda Expression:
It is introduced for enabling functional programing 
FUNCTION means method 
input => some argument and return some output 

Syntax: java.util.function.Function;
Function<Integer , Integer> f =i-> i*i; 

A function we can handle the function as Object;

LESS CODE FOR MORE THINGS 

Topic 1 : Lambda Expression 
Topic 2 : Funcation Interfaces
Topic 3 : Default Method or static method;
Topic 4 : Predefine Functional Interfaces
          Predicate
          Funcational
          Consumer
          Supplier
          etc
Topic 5 : Function Concept 
Topic 6 : Double colon operator ::
Topic 7 : Reference function and constructor
Topic 8 : Date and Time Api
Topic 9 : Stream Class
Topic 10: Optional Class
Topic 11: Nashron Javascript Engine


Topic 1 Lambda Expression :
Lambda calculus in Mathamitics solved tough problem easily 1930 
Slowly Programmer are start using lambda 
First programing language which uses Lambda expression LISP

Is Lambda expression is speciality of Java ? Answer : NO because of Object oriented Nature only
RUBY CSharp phython LISP other languages already having functional programming

Question What is the main objective of Lambda Expression ?
To bring benefits of functional programming into Java 

What is the Lambda Expression ?
It is an anonymous  Function 

What is anonymous  ?
means NameLess

How to write anonymous  funcation ?
Without name and return type and without modifiers 

Please confirm writing lambda expression is difficult or easy 
Very Very Very Easy Concept even Nursury Level 
Reason : means you dont learn properly 

How to write in Lambda Expression ?
() -> {} 
-> Symbol for Lambda Expression 
Remove function name
Remove return name
Remove return type 
Sir if body contain only one line {} not required 

or 
public void myFunction() {
System.out.println("Lambda Expression are used for introducing or using functional Programming in Java language like other Language");

}

Example 2 :
public void myFunction2(int a,int b) {
System.out.println(a+b);

}

Lambda Expression:
(a,b) -> System.out.println(a+b);
Automatically compiler will Guess the Type ;
So remove input Type

Example 3 :

public int square(int n ){

    return (n*n);
}

Lambda Expression:
(int n) -> { return n*n;}

or
(int n) -> n*n;
or
or 
(n) -> n*n; 
or 
n->n*n;



if you remove {} than return is not required as shown above;

Example 3 ;
public string length(String s){
    return s.length();
}

Lambda Expresssion :
(s) -> s.length();

or 
s-> s.length();


Topic : How to Call the Lambda Expresssion ;
We go for FI 

What is FI ?
Funcational Interface 

What is Funcation Interface ;
Funcation Interface is new but concept is OLD 

Have you heard about Runnable Interface , CompareTo Funcation , Callable in multithreading 
Do you know all these are Functional Interefaces 

What is the common point in above 
Common is that all contain only one abstract method 
Runnable contain run() method 
Comparable CompareTo()
Comparator compare()
ActionListner actionPerformed()
Callable contain call() method


SAM - Single Abstract Mehod 
To invoke Lambda expression funcation interface is required ;

What is Functional Interface ?
Functional interface contain only single abstract method 

Single Word explanation 

Lambda Expression - anonymous function 
Function interfce - SAM - Single Abstract method 

Example :
public void m1() {

    System.out.println("Hello");
}

Lambda Expression :
() -> System.out.println("Hello");

Lambda Expression always going to express the one method;

Special Symbol -> i.e arrow or 

Example 2 :
public void add(int a , int b){
System.out.println(a+b);

}

Lambda expression 
(a,b) ->{System.out.println(a+b);}

Example 3:

public int square(int n){

    return n*n ;
}

Lambda Expression :
n-> n*n;

if u have only one argument parenthesis are optional (n) or n
(a,b) - Two argument parenthesis required
()  - No argument parenthesis is required 


Statement : Valid Invalid 
n-> return n*n; Invalid
n->{return n*n;}; Valid
n->{return n*n}; Invalid
n->{n*n;};Invalid
n->n*n; Valid

Conclusion:
Rules 1: Without curly braces we cannot use return keyword 
compiler will consider return value automatically

Rules 2: Within curly braces if we want to return some value we should use return statement

Question 
In java 1.8 default method introduce can we take in funcational interface
YES 
Remember Concept : Restriction is applicable for abstract method i.e only one abstract method
so any number of static and default method is allowed 

Explanation:
FIEX1.java 

@FuncationInterface
interface FIEX1 {
public void m1();
public void m2(){}
public void m3(){}

}

Explanation : Inheritence

@FunctionalInterface
interface FIEX2
{
public void m1();
}

@FunctionalInterface
interface FIEX3 extends FIEX2 {

}


Question :Can we use Lambda expression without functional interface 
Explation 

interface I4 {
public void m1(String s1);
public void m2(String s2);

}

class FIEX6 {
public static void main(String args[]) {

    I4 d4 = (s1)->System.out.println("calling function" +s1);
}

}

Rule :Lambda expression can be used where functional interface ;

Question 
Lambda Expression are equivalent to ananoymus class
NO because no seperate class file created in case of lambda class while in ananoymus class will generate seperate class 

Question :
Do you know how many ways thread can define thread
1 Implementing Runnable interface 
2 Extending Thread class 

Code : 
class MyRunnable implements Runnable {

    public void run(){
for(int i =0; i<10;i++){
    System.out.println("Child Thread :"+i);
}
    }
}
class MyRunnableTest {
    public static void main(String args[]){
MyRunnable r = new MyRunnable();
Thread t = new Thread(r);
t.start();
for(int i =0; i<10;i++){
    System.out.println("Main Thread :"+i);
}
    }
}


Question : Collection using Lambda Expression 
MyCollection.java and MyCollectionL.java

If you want sorting go for
Comparator -Interface
int compare(Object obj1 ,Object obj2)
 return -ve iff obj1 has to come before obj2
return +ve iff obj1 has to come after obj2
return 0 off obj1 and obj2 are equal

class Mycomparator implements Comparator<Integer> {

public int compare(Integer I1 , Integer I2){


return I1<I2?-1:(I1>I2)?1:0;

// Using Tenatory operation single line 

  /*   if(I1<I2){
        return -1;
    }
    else if(I1>I2){ return 1;}
    else {return 0;} */
}

}

MyCollectionL.java 
import java.util.*;
import java.util.stream.*;
class MyCollectionL {
    public static void main(String args[]){
    Comparator<Integer> c = (I1,I2)->I1<I2?-1:(I1>I2)?1:0;
    ArrayList<Integer> i = new ArrayList<Integer> ();
        i.add(100);
        i.add(2);
        i.add(3);
        i.add(400);
        i.add(50);
        i.add(1);
        System.out.println(" Printing sequence as you insert the number by default :"+i);
        Collections.sort(i,c);
        System.out.println("Sorted list is printing : "+i);
        i.stream().forEach(System.out::println);
        List<Integer> i2=i.stream().filter(j->j%2==0).collect(Collectors.toList());
        System.out.println("Only Even number is printing"+i2);
}
}

Discuss Lambda Express with Ananoymus classes
If you want sorting go for
Comparator -Interface
int compare(Object obj1 ,Object obj2)
 return -ve iff obj1 has to come before obj2
return +ve iff obj1 has to come after obj2
return 0 off obj1 and obj2 are equal

Terniary operation 
(e1,e2)->(e1.eno>e2.eno)?-1:(e1.eno>e2.eno)>1:0


import java.util.*;
import java.util.stream.*;

class Employee {
String name;
int id;
Employee(int id,String name){ this.id=id;this.name=name;}

 public String toString(){
 return "id: "+id +" name: "+name;
} 
}

public class MyAnanoymus {
public static void main(String args[]){
    Employee emp1 =new Employee(1,"Saurabh");
    ArrayList<Employee> l = new ArrayList<Employee>();
l.add(new Employee(1,"Saurabh"));
l.add(new Employee(2,"Gaurav"));
l.add(new Employee(79,"Swati"));
l.add(new Employee(5,"Neha"));
l.add(new Employee(78,"Ritu"));
System.out.println(emp1); // Without implementing toString() Hashcode is printing 
// After implemeting emp1 internally calling toString() method
System.out.println(" Default as Inserted "+l);

Collections.sort(l,(e1,e2)->(e1.id<e2.id)?-1:(e1.id>e2.id)?1:0); // Lambda Expression Comparator
System.out.println("Sorted Using Empid: "+l);

Collections.sort(l,(e1,e2)-> e1.name.compareTo(e2.name)); // Lambda Expression compareTo
System.out.println("Sorted Using Names: "+l);

}

}

Concept:
Anonymous Inner classes Vs Lambda Expression:
The class dont having name is called Anonymous 

Thread t = new Thread();

Thread t = new Thread()
{
....
};

We are writing a class that extends Thread class withou name as shown above 

Runnable r - new Runnable(); >. Invalid Interface object cannot created 

Runnable r = new Runnable(){

    ...
}

Now above creating a child class for Runable interface 
Annonymous class is implementing the Runnable interface 
Annonymous class is extend the Thread class

public class MyAnonymous {
public static void main(String args[]){
 Runnable r = new Runnable (){
     public void run(){
         for(int i=0;i<10;i++){
             System.out.println("Thread Child class Implemetation in Anonymous class");
         }
     }
 };

 Thread t = new Thread(r);
 t.start();
for(int i=0;i<10;i++){
             System.out.println("Main Thread is running");
         }

}




public class MyAnonymousL {

    public static void main(String args[]){

        System.out.println("Lambda Expression");

        Runnable r = ()->{
            for(int i=0;i<10;i++){
             System.out.println("Thread Child class Implemetation in Anonymous class");
         }
        };

        Thread t = new Thread(r);
 t.start();
for(int i=0;i<10;i++){
             System.out.println("Main Thread is running");
         }

}
    }

Question :
Which one is more powerful Anonymous class or Lambda Expression 
Anonymus Inner class is more powerful 

Explanation 
interface I {
m1();
m2()

}

Above Interface I we can go for anonymus Inner class but not lambda expression because two abstract method 
Functional Interface fails the Rule only one abstract method but here m1 and m2
I i = new I(){
m1(){
    ...
}

m2(){
    ....
}
}

Anonymous Inner class != Lambda Expression 

Practice :if employee class has employee id and salary then how to find second highest salary based on employee id

https://www.youtube.com/watch?v=k2PiRM2d_iU&list=PLd3UqWTnYXOlrKZWFTbgguqNRA_uVyeBl&index=2
https://www.youtube.com/watch?v=mLnuX1cp3ds&list=PLd3UqWTnYXOlrKZWFTbgguqNRA_uVyeBl&index=3



