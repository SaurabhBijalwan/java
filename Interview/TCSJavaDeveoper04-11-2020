
TCS
java developer 
Pune
Jaswin

Question
Static and Non static varidable difference  

Question :
React -fetch Api calling
Hooks 
Component 


Question 
Stream 
Imutable class -final class private method no setter 

Question 
Can we install JVM in client machine 

Question :
Rest Api and Soap services 

Question :
thread states
A thread lies only in one of the shown states at any instant:
New.
Runnable.
Blocked.
Waiting.
Timed Waiting.
Terminated.
Thread.sleep
Object.wait with timeout
Thread.join with timeout
LockSupport.parkNanos
LockSupport.parkUntil

Question 
What is Thread.join with timeout
Second thread will join to thread first and second thread wil execute after the completion of first


https://www.geeksforgeeks.org/joining-threads-in-java/


Answer:
// Employee.java
final class Employee {
   private final String empName;
   private final int age;
   private final Address address;
   public Employee(String name, int age, Address address) {
      super();
      this.empName = name;
      this.age = age;
      this.address = address;
   }
   public String getEmpName() {
      return empName;
   }
   public int getAge() {
      return age;
   }
   /* public Address getAddress() {
      return address;
      }
   */
   public Address getAddress() throws CloneNotSupportedException {
      return (Address) address.clone();
   }
}
// Address.java
class Address implements Cloneable {
   public String addressType;
   public String address;
   public String city;
   public Address(String addressType, String address, String city) {
      super();
      this.addressType = addressType;
      this.address = address;
      this.city = city;
   }
   public String getAddressType() {
      return addressType;
   }
   public void setAddressType(String addressType) {
      this.addressType = addressType;
   }
   public String getAddress() {
      return address;
   }
   public void setAddress(String address) {
      this.address = address;
   }
   public String getCity() {
      return city;
   }
   public void setCity(String city) {
      this.city = city;
   }
   public Object clone() throws CloneNotSupportedException {
      return super.clone();
   }

   @Override
   public String toString() {
      return "Address Type - "+addressType+", address - "+address+", city - "+city;
   }
}
// MainClass.java
public class MainClass {
   public static void main(String[] args) throws Exception {
      Employee emp = new Employee("Adithya", 34, new Address("Home", "Madhapur", "Hyderabad"));
      Address address = emp.getAddress();
      System.out.println(address);
      address.setAddress("Hi-tech City");
      address.setAddressType("Office");
      address.setCity("Hyderabad");
      System.out.println(emp.getAddress());
   }
}

Immutable objects are those objects whose states cannot be changed once initialized. 
Sometimes it is necessary to make an immutable class as per the requirement. For example, All primitive wrapper classes (Integer, Byte, Long, Float, Double, Character, Boolean and Short) are immutable in Java. String class is also an immutable class.

To create a custom immutable class we have to do the following steps
Declare the class as final so it can’t be extended.
Make all fields private so that direct access is not allowed.
Do not provide setter methods (methods that modify fields) for variables, so that it can not be set.
Make all mutable fields final so that their values can be assigned only once.
Initialize all the fields through a constructor doing the deep copy.
Perform cloning of objects in the getter methods to return a copy rather than returning the actual object reference.
If the instance fields include references to mutable objects, don’t allow those objects to be changed
Don’t provide methods that modify the mutable objects.
Don’t share references to the mutable objects. Never store references to external,
 mutable objects passed to the constructor. If necessary, create copies and store references to the copies. 
 Similarly, create copies of our internal mutable objects when necessary to avoid returning the originals in our methods.


Life Cycle of a thread

New Thread: When a new thread is created, it is in the new state. The thread has not yet started to run when thread is in
 this state. When a thread lies in the new state, it’s code is yet to be run and hasn’t started to execute.
Runnable State: A thread that is ready to run is moved to runnable state. In this state, a thread might actually be 
running or it might be ready run at any instant of time. It is the responsibility of the thread scheduler to give 
the thread, time to run.
A multi-threaded program allocates a fixed amount of time to each individual thread. Each and every thread runs 
for a short while and then pauses and relinquishes the CPU to another thread, so that other threads can get a chance to run. When this happens, all such threads that are ready to run, waiting for the CPU and the currently running thread lies in runnable state.
Blocked/Waiting state:When a thread is temporarily inactive, then it’s in one of the following states:
Blocked
Waiting

For example, when a thread is waiting for I/O to complete, it lies in the blocked state. 
It’s the responsibility of the thread scheduler to reactivate and schedule a blocked/waiting thread. 
A thread in this state cannot continue its execution any further until it is moved to runnable state. 
Any thread in these states does not consume any CPU cycle.

A thread is in the blocked state when it tries to access a protected section of code that is currently locked by some other thread. When the protected section is unlocked, the schedule picks one of the thread which is blocked for that section and moves it to the runnable state. Whereas, a thread is in the waiting state when it waits for another thread on a condition. When this condition is fulfilled, the scheduler is notified and the waiting thread is moved to runnable state.

If a currently running thread is moved to blocked/waiting state, another thread in the runnable state is scheduled by the thread scheduler to run. It is the responsibility of thread scheduler to determine which thread to run.

Timed Waiting: A thread lies in timed waiting state when it calls a method with a time out parameter. A thread lies in this state until the timeout is completed or until a notification is received. For example, when a thread calls sleep or a conditional wait, it is moved to a timed waiting state.
Terminated State: A thread terminates because of either of the following reasons:
Because it exists normally. This happens when the code of thread has entirely executed by the program.
Because there occurred some unusual erroneous event, like segmentation fault or an unhandled exception.
A thread that lies in a terminated state does no longer consumes any cycles of CPU.

Implementing Thread States in Java

In Java, to get the current state of the thread, use Thread.getState() method to get the current state of the thread. 
Java provides java.lang.Thread.State class that defines the ENUM constants for the state of a thread, as summary of
 which is given below:

Constant type: New
Declaration: public static final Thread.State NEW
Description: Thread state for a thread which has not yet started.

Constant type: Runnable
Declaration: public static final Thread.State RUNNABLE
Description: Thread state for a runnable thread. A thread in the runnable state is executing in the Java virtual machine 
but it may be waiting for other resources from the operating system such as processor.

Constant type: Blocked
Declaration: public static final Thread.State BLOCKED
Description: Thread state for a thread blocked waiting for a monitor lock. A thread in the blocked state is waiting 
for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait().

Constant type: Waiting
Declaration: public static final Thread.State WAITING
Description: Thread state for a waiting thread. Thread state for a waiting thread. A thread is in the waiting state
 due to calling one of the following methods: